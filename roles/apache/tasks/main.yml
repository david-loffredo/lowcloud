---
#
# apache2        2.4.62     Debian 12
# apache2        2.4.38     Debian 10

- name: apache packages are installed
  package:
    state: present
    name:
      - apache2
      - rsync   # for pushing web data

- name: apache global configurations present
  template: src={{ item.src }}.j2
    dest=/etc/apache2/{{ item.dst }}
    owner=root group=root mode=0644
  with_items:
    - { src: apache2.conf, dst: apache2.conf }
    - { src: conf-security.conf, dst: conf-available/security.conf }
    - { src: conf-expires.conf, dst: conf-available/expires.conf }
  notify:
    - restart apache

# make the link manually rather than call a2enconf
- name: apache modules present
  file:
    dest: /etc/apache2/conf-enabled/{{ item }}
    src: ../conf-available/{{ item }}
    state: link
    owner: root
    group: root
    mode: 0644
  with_items:
    - security.conf
    - expires.conf
  notify:
    - restart apache

# Must do before we enable the configs for the sites, because it
# parses the configs, which results in a chicken-and-egg situation if
# we need a particular module and it is not yet installed.
- name: apache modules present
  apache2_module: name={{ item }} state=present
  with_items: "{{ (apache_modules + apache_default_modules) | unique }}"
  notify:
    - restart apache


    
# Should already be present on Debian.  Use for the web management
# user accounts for each website.
- name: www-data group present
  group: name=www-data state=present

# Create a normal user accout without sudo to allow others to upload
# web content.   Starred password, only login by ssh key.
- name: www account present
  user: name=www   password='*'  state=present
    group=users  groups=www-data  append=yes
    shell=/bin/bash

- name: www account has authorized keys
  authorized_key:
    user: www
    key:  "{{ lookup('file', www_acct_sshpub) }}"


- name: web root has proper ownership
  file:
    path: "{{ webdata_root }}"
    state: directory
    owner: www
    group: www-data
    mode: 0755
    
- name: configurations present for each host
  include_tasks: host.yml
  with_items:
    - "{{ web_vhosts }}"
  loop_control:
    loop_var: host

- name: apache default site removed
  file: path={{ item }} state=absent
  with_items:
    - /etc/apache2/sites-available/000-default.conf
    - /etc/apache2/sites-available/default-ssl.conf
    - /etc/apache2/sites-enabled/000-default.conf
    - /etc/apache2/sites-enabled/default-ssl.conf
    - /var/www/html
  notify:
    - restart apache

# Stapling is usually done globally, in the mod/ssl.conf
# SSLUseStapling On
# SSLStaplingCache shmcb:${APACHE_RUN_DIR}/ssl_stapling(32768)

## The default Apache config enables gzip compression, and it is not
## recommended to turn it off.  If your website uses cookies, strongly
## advise using the SameSite flag to mitigate BREACH (CVE-2013-3587)

## Consider adding the dateext directive to the apache logrotate
## config in /etc/logrotate.d/apache2

## Standard ports 80/443 are fine.  If you want to change that, you
## may need to change the Listen defs in /etc/ports.conf

## Joe has a 01_wildcard.conf that uses a rewrite rule to throw
## anything else to steptools.com
## apachetop is a monitoring tool

## apache2-utils appears to be installed with the main 
# rovides some add-on programs useful for any web server. These include:

#  - ab (Apache benchmark tool)
#  - fcgistarter (Start a FastCGI program)
#  - logresolve (Resolve IP addresses to hostnames in logfiles)
#  - htpasswd (Manipulate basic authentication files)
#  - htdigest (Manipulate digest authentication files)
#  - htdbm (Manipulate basic authentication files in DBM format, using APR)
#  - htcacheclean (Clean up the disk cache)
#  - checkgid (Checks whether the caller can setgid to the specified group)
#  - check_forensic (Extract mod_log_forensic output from Apache log files)
#  - httxt2dbm (Generate dbm files for use with RewriteMap)

# logrotate is already installed 
#  - rotatelogs (Periodically stop writing to a logfile and open a new one)
#  - split-logfile (Split a single log including multiple vhosts)

- name: apache start at boot - {{ web_services_bootstart }}
  service: name=apache2 enabled={{ web_services_bootstart }}
