---
# This checks if a certificate is there and verifies that it has the
# same list of DNS entries as we need.  To do that we need dump the
# domains encoded in the cert with "openssl x509 -text < cert.pem" and
# then grep the output for names prefixed with DNS:
#
#       DNS:example.com, DNS:www.example.com
#
# We use a custom perl script "testcertnames" to do this analysis.
#

# We use the script to check whether the cert exists and matches all
# of the names that we are looking for.
- name: "{{ cert_item.domains[0] }} : cert exists and matches domains"
  command: "{{ certbot_test_util }} -d {{ cert_item.domains | join(',') }}"
  register: cert_result
  failed_when: no
  changed_when: cert_result.rc != 0

- name: services stopped before certbot create
  service:
    name: "{{ item }}"
    state: stopped
  when: cert_result is not skipped and cert_result.rc != 0
  with_items: "{{ certbot_service_stop }}"
  failed_when: false   # might not even be installed yet

- name: "{{ cert_item.domains[0] }} : certbot create new certificate"
  command: "{{ certbot_create_command }}"
  when: "cert_result is not skipped and 'No cert file' in cert_result.stdout"

- name: "{{ cert_item.domains[0] }} : certbot expand existing certificate"
  command: "{{ certbot_modify_command }}"
  when: "cert_result is not skipped and 'cert missing' in cert_result.stdout"

- name: services started after certbot create
  service:
    name: "{{ item }}"
    state: started
  when: cert_result is not skipped and cert_result.rc != 0
  with_items: "{{ certbot_service_stop }}"
  failed_when: false   # might not even be installed yet
